orderOptions := postgrest.OrderOpts{By: "username", Asc: true}
err := sb.From("users").Select("username, email").Order("random()").Limit(1).Exec(c, &user)

query := `SELECT username, email FROM users ORDER BY RANDOM() LIMIT 1`
err := sb.SQL(query).Exec(c, &user)

http://example.com/like?liker_user_id=123&liked_user_id=456


package main

import (
    "net/http"

    "github.com/gin-gonic/gin"
    "github.com/supabase-community/supabase-go"
)

func main() {
    // Supabaseクライアントの作成
    supabaseURL := "https://xyzjdfnpypknqjmiolzt.supabase.co"
    supabaseKey := "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh5empkZm5weXBrbnFqbWlvbHp0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTUwNTEwMzQsImV4cCI6MjAzMDYyNzAzNH0.V4lk56W0UuJBJkXTMxNRMcdkFNdbwaimBmbf1vlrDI8"
    sb,err := supabase.NewClient(supabaseURL, supabaseKey,nil)
		if err != nil {
			panic(err) 
	}

    // Ginルーターの初期化
    r := gin.Default()

    // ルートエンドポイントの定義
    r.GET("/", func(c *gin.Context) {
        // データベースからランダムな1行のユーザ情報を取得
        query := sb.From("users").Postgrest().Select("username", "email",false).Order("RANDOM()").Limit(1)

				res, err := query.Exec(c)
        if err != nil {
            // エラーハンドリング
            c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
            return
        }

        // 結果を取得
        var user struct {
            Username string `json:"username"`
            Email    string `json:"email"`
        }
        if err := res.Scan(&user); err != nil {
            // エラーハンドリング
            c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
            return
        }

        // HTMLテンプレートにデータを渡してレスポンスを返す
        c.HTML(http.StatusOK, "index.html", gin.H{
            "username": user.Username,
            "email":    user.Email,
        })
    })

    // サーバーを開始
    r.Run(":8080")
}


